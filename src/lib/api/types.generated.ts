/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/clinicians": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Pharmacy_GetClinicians"];
        put?: never;
        post: operations["Pharmacy_CreateClinician"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clinicians/{clinicianId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["Pharmacy_DeleteClinician"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clinicians/{clinicianId}/clinic/{clinicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description links a clinician to a clinic by clinician_id and clinic_id clinicians have to be linked in order to be able to prescribe prescriptions */
        put: operations["Pharmacy_LinkClinicClinician"];
        post?: never;
        /** @description unlinks a clinician from a clinic by clinician_id and clinic_id */
        delete: operations["Pharmacy_UnlinkClinicClinician"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clinics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Pharmacy_GetClinics"];
        put?: never;
        post: operations["Pharmacy_CreateClinic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clinics/{clinicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["Pharmacy_DeleteClinic"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clinics/{clinicId}/clinicians": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Pharmacy_GetClinicClinicians"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/drugs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Pharmacy_GetDrugs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/patients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Services_GetPatientByExternalID"];
        put: operations["Services_Update"];
        post: operations["Services_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pharmacies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Pharmacy_GetPharmacy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/prescription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Pharmacy_SubmitPrescription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new session
         * @description Creates a new session using the given API key for the given scope
         */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Clinic: {
            id?: string;
            tenantId?: string;
            externalId?: string;
            name?: string;
            /** @example 123 Main St */
            addressLineOne?: string;
            /** @example Apt 1 */
            addressLineTwo?: string;
            /** @example Tampa */
            city?: string;
            /** @example 12345 */
            zip?: string;
            /** @example FL */
            administrativeArea?: string;
            /** @example US */
            country?: string;
            phone?: string;
        };
        Clinician: {
            id?: string;
            tenantId?: string;
            externalId?: string;
            firstName?: string;
            lastName?: string;
            npi?: string;
            dea?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        CreateClinicRequest: {
            clinic?: components["schemas"]["Clinic"];
        };
        CreateClinicResponse: {
            clinic?: components["schemas"]["Clinic"];
        };
        CreateClinicianRequest: {
            clinician?: components["schemas"]["Clinician"];
        };
        CreateClinicianResponse: {
            clinician?: components["schemas"]["Clinician"];
        };
        CreatePatientRequest: {
            patient?: components["schemas"]["Patient"];
        };
        CreatePatientResponse: {
            patientId?: string;
        };
        Dosage: {
            concentration?: string;
            /** Format: float */
            quantity?: number;
            /** Format: int32 */
            concentrationLvl?: number;
            directions?: string;
        };
        Drug: {
            id?: string;
            name?: string;
            /**
             * Format: enum
             * @enum {string}
             */
            dosageForm?: "DOSAGE_FORM_UNSPECIFIED" | "DOSAGE_FORM_INJECTABLE" | "DOSAGE_FORM_ODT";
            dosages?: components["schemas"]["Dosage"][];
        };
        GetClinicCliniciansResponse: {
            clinicians?: components["schemas"]["Clinician"][];
        };
        GetCliniciansResponse: {
            clinicians?: components["schemas"]["Clinician"][];
        };
        GetClinicsResponse: {
            clinics?: components["schemas"]["Clinic"][];
        };
        GetDrugsResponse: {
            drugs?: components["schemas"]["Drug"][];
        };
        GetPatientByExternalIDResponse: {
            patient?: components["schemas"]["Patient"];
        };
        GetPharmacyResponse: {
            pharmacy?: components["schemas"]["PharmacyDetails"];
        };
        /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
        GoogleProtobufAny: {
            /** @description The type of the serialized message. */
            "@type"?: string;
        } & {
            [key: string]: unknown;
        };
        Height: {
            /**
             * Format: float
             * @example 180
             */
            cm?: number;
            /** Format: float */
            feet?: number;
            /** Format: float */
            inches?: number;
        };
        Patient: {
            /** @example 1234567890 */
            id?: string;
            /** @example johndoe@gmail.com */
            email?: string;
            /**
             * @description Patients phone number in E.164 format
             * @example +11234567890
             */
            phone?: string;
            /** @example John */
            firstName?: string;
            /** @example Doe */
            lastName?: string;
            /** @example 123 Main St */
            addressLineOne?: string;
            /** @example Apt 1 */
            addressLineTwo?: string;
            /** @example Tampa */
            city?: string;
            /** @example 12345 */
            zip?: string;
            /** @example FL */
            administrativeArea?: string;
            /** @example US */
            country?: string;
            /**
             * Format: date-time
             * @example 1997-06-12T00:00:00Z
             */
            dateOfBirth?: string;
            profile?: components["schemas"]["PatientProfile"];
            /** @example wellsync */
            tenantId?: string;
            /** @example 123456 */
            externalId?: string;
        };
        PatientProfile: {
            height?: components["schemas"]["Height"];
            weight?: components["schemas"]["Weight"];
            /** @example [
             *       "peanut",
             *       "penicillin"
             *     ] */
            allergies?: string[];
            /** @example [
             *       "diabetes",
             *       "hypertension"
             *     ] */
            medicalConditions?: string[];
            /**
             * Format: int32
             * @example 120
             */
            bpSystolic?: number;
            /**
             * Format: int32
             * @example 90
             */
            bpDiastolic?: number;
            /**
             * Format: int32
             * @example 100
             */
            heartRate?: number;
            /** @example [
             *       "aspirin",
             *       "ibuprofen"
             *     ] */
            medications?: string[];
            /**
             * Format: enum
             * @enum {string}
             */
            sexAtBirth?: "SEX_MALE" | "SEX_FEMALE" | "SEX_INTERSEX";
        };
        PharmacyDetails: {
            id?: string;
            name?: string;
            email?: string;
            phone?: string;
            fax?: string;
            addressLineOne?: string;
            addressLineTwo?: string;
            city?: string;
            administrativeArea?: string;
            zip?: string;
        };
        /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
        Status: {
            /**
             * Format: int32
             * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
             */
            code?: number;
            /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
            message?: string;
            /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
            details?: components["schemas"]["GoogleProtobufAny"][];
        };
        SubmitPrescriptionRequest: Record<string, never>;
        SubmitPrescriptionResponse: Record<string, never>;
        UpdatePatientRequest: {
            patient?: components["schemas"]["Patient"];
        };
        UpdatePatientResponse: {
            patient?: components["schemas"]["Patient"];
        };
        Weight: {
            /**
             * Format: float
             * @example 95
             */
            kg?: number;
            /** Format: float */
            lbs?: number;
        };
        Session: {
            access_token: string;
            /** Format: date-time */
            expires_at: string;
        };
    };
    responses: {
        /** @description The specified resource was not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Status"];
            };
        };
        /** @description The request was invalid or cannot be otherwise served */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Status"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Pharmacy_GetClinicians: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCliniciansResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_CreateClinician: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateClinicianRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateClinicianResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_DeleteClinician: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description clinician uuid */
                clinicianId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_LinkClinicClinician: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description clinician uuid */
                clinicianId: string;
                /** @description clinic uuid */
                clinicId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_UnlinkClinicClinician: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description clinician uuid */
                clinicianId: string;
                /** @description clinic uuid */
                clinicId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_GetClinics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetClinicsResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_CreateClinic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateClinicRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateClinicResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_DeleteClinic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description clinic uuid */
                clinicId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_GetClinicClinicians: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clinicId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetClinicCliniciansResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_GetDrugs: {
        parameters: {
            query?: {
                patientExternalId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDrugsResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Services_GetPatientByExternalID: {
        parameters: {
            query?: {
                externalId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPatientByExternalIDResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Services_Update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePatientRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePatientResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Services_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePatientRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePatientResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_GetPharmacy: {
        parameters: {
            query?: {
                drugId?: string;
                patientExternalId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPharmacyResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Pharmacy_SubmitPrescription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitPrescriptionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitPrescriptionResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Session created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized to perform the given action. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
